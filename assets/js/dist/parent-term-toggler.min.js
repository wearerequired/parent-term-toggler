"use strict";function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function a(a,b){for(var c=0;c<b.length;c++){var d=b[c];d.enumerable=d.enumerable||!1,d.configurable=!0,"value"in d&&(d.writable=!0),Object.defineProperty(a,d.key,d)}}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),_window=window,$=_window.jQuery,ParentTermToggler=function(){function a(b){_classCallCheck(this,a),this.taxonomy=b,this.$metabox=$("#"+b+"div")}return _createClass(a,[{key:"toggle",value:function(a){var b=$(a.currentTarget);if(this.termIsChild(b)){this.stopWatch();var c=b.is(":checked");this.traverseParentTermsAndSetChecked(b,c),this.$metabox.find('input[type="checkbox"]:checked').eq(0).trigger("click"),this.watch()}}},{key:"traverseParentTermsAndSetChecked",value:function(a,b){a.parents(".children").each(function(a,c){var d=$(c).parent("li").find('input[type="checkbox"]').eq(0);b!==d.prop("checked")&&d.prop("checked",b).trigger("change")}).bind(this)}},{key:"termIsChild",value:function(a){return a.closest(".children").length>0}},{key:"watch",value:function(){this.$metabox.on("change.parent-term-toggler",'input[type="checkbox"]',this.toggle.bind(this))}},{key:"stopWatch",value:function(){this.$metabox.off("change.parent-term-toggler")}}]),a}();$(function(){_ParentTermTogglerSettings.supportedTaxonomies.forEach(function(a){new ParentTermToggler(a).watch()})});